{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nfunction postReducer(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload.id ? {\n          ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\nexport default postReducer;","map":{"version":3,"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"sources":["/Users/yemengchen/Desktop/MERN_Practice/client/src/reducers/post.js"],"sourcesContent":["import {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n} from '../actions/types';\n\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error:{}\n}\n\nfunction postReducer(state = initialState, action){\n    const {type, payload} = action;\n    switch(type){\n        case GET_POSTS:\n            return {\n                ...state,\n                posts:payload,\n                loading:false\n            };\n\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            };\n        case ADD_POST:\n            return {\n                  ...state,\n                  posts: [payload, ...state.posts],\n                  loading: false\n                };\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            };\n        case POST_ERROR:\n            return {\n                ...state,\n                error:payload,\n                loading:false\n            };\n        case UPDATE_LIKES:\n            return {\n            ...state,\n            posts: state.posts.map((post) =>\n                post._id === payload.id ? { ...post, likes: payload.likes } : post\n            ),\n            loading: false\n            };\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: {...state.post, comments: payload },\n                loading: false\n            }\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post, \n                    comments: state.post.comments.filter(comment => comment._id !== payload)\n                },\n                loading: false\n            }\n        default:\n            return state;\n\n    }\n}\n\nexport default postReducer;"],"mappings":"AAAA,SACIA,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,cAAc,QACX,kBAAkB;AAGzB,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAC,CAAC;AACX,CAAC;AAED,SAASC,WAAWA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,EAAC;EAC9C,MAAM;IAACC,IAAI;IAAEC;EAAO,CAAC,GAAGF,MAAM;EAC9B,QAAOC,IAAI;IACP,KAAKhB,SAAS;MACV,OAAO;QACH,GAAGc,KAAK;QACRL,KAAK,EAACQ,OAAO;QACbN,OAAO,EAAC;MACZ,CAAC;IAEL,KAAKN,QAAQ;MACT,OAAO;QACH,GAAGS,KAAK;QACRJ,IAAI,EAAEO,OAAO;QACbN,OAAO,EAAE;MACb,CAAC;IACL,KAAKP,QAAQ;MACT,OAAO;QACD,GAAGU,KAAK;QACRL,KAAK,EAAE,CAACQ,OAAO,EAAE,GAAGH,KAAK,CAACL,KAAK,CAAC;QAChCE,OAAO,EAAE;MACX,CAAC;IACT,KAAKR,WAAW;MACZ,OAAO;QACH,GAAGW,KAAK;QACRL,KAAK,EAAEK,KAAK,CAACL,KAAK,CAACS,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACS,GAAG,KAAKF,OAAO,CAAC;QACvDN,OAAO,EAAE;MACb,CAAC;IACL,KAAKV,UAAU;MACX,OAAO;QACH,GAAGa,KAAK;QACRF,KAAK,EAACK,OAAO;QACbN,OAAO,EAAC;MACZ,CAAC;IACL,KAAKT,YAAY;MACb,OAAO;QACP,GAAGY,KAAK;QACRL,KAAK,EAAEK,KAAK,CAACL,KAAK,CAACW,GAAG,CAAEV,IAAI,IACxBA,IAAI,CAACS,GAAG,KAAKF,OAAO,CAACI,EAAE,GAAG;UAAE,GAAGX,IAAI;UAAEY,KAAK,EAAEL,OAAO,CAACK;QAAM,CAAC,GAAGZ,IAClE,CAAC;QACDC,OAAO,EAAE;MACT,CAAC;IACL,KAAKL,WAAW;MACZ,OAAO;QACH,GAAGQ,KAAK;QACRJ,IAAI,EAAE;UAAC,GAAGI,KAAK,CAACJ,IAAI;UAAEa,QAAQ,EAAEN;QAAQ,CAAC;QACzCN,OAAO,EAAE;MACb,CAAC;IACL,KAAKJ,cAAc;MACf,OAAO;QACH,GAAGO,KAAK;QACRJ,IAAI,EAAE;UACF,GAAGI,KAAK,CAACJ,IAAI;UACba,QAAQ,EAAET,KAAK,CAACJ,IAAI,CAACa,QAAQ,CAACL,MAAM,CAACM,OAAO,IAAIA,OAAO,CAACL,GAAG,KAAKF,OAAO;QAC3E,CAAC;QACDN,OAAO,EAAE;MACb,CAAC;IACL;MACI,OAAOG,KAAK;EAEpB;AACJ;AAEA,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}